/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import parser.ParseException;
import parser.syntaxtree.*;
import parser.syntaxtree.statements.*;
import parser.syntaxtree.expressions.*;
import parser.syntaxtree.expressions.operators.*;

public class Parser implements ParserConstants {
    static Parser parser = null ;
        public static Program parse(String file) throws FileNotFoundException, ParseException {
            InputStream is = new java.io.FileInputStream(file);
            Program program = new Program();

            if (parser == null) {
                    parser = new Parser(is);
            }
            else {
                ReInit(is);
            }
            parser.Start(program);
            return program;
        }

  static final public void Start(Program program) throws ParseException {
    Program(program);
  }

  static final public void Program(Program program) throws ParseException {
   List<Statement> statementList;
    statementList = StatementList();
        program.setStatementList(statementList);
  }

  static final public List<Statement> StatementList() throws ParseException {
   ArrayList<Statement> statementList = new ArrayList<Statement>();
   List<Statement> statementSubList;
   Statement statement;
    statement = Statement();
        statementList.add(statement);
    statementSubList = StatementList1();
        statementList.addAll(statementSubList);
        {if (true) return statementList;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Statement> StatementList1() throws ParseException {
    List<Statement> statementList = new ArrayList<Statement>();
    List<Statement> statementSubList;
    Statement statement;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
    case WHILE:
    case IF:
      statement = Statement();
      statementSubList = StatementList1();
        statementList.add(statement);
        statementList.addAll(statementSubList);
        {if (true) return statementList;}
      break;
    default:
      jj_la1[0] = jj_gen;
        {if (true) return statementList;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
     Token variable;
     Expression expression;
     Statement statement;
     List<Statement> statementList;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      variable = jj_consume_token(VARIABLE);
      jj_consume_token(EQUAL);
      expression = ExpressionWithComparing();
            {if (true) return new AssignStatement(variable.image, expression);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      expression = ExpressionWithComparing();
      statementList = StatementList();
      jj_consume_token(END);
            {if (true) return new WhileStatement(expression, statementList);}
      break;
    case IF:
      jj_consume_token(IF);
      expression = ExpressionWithComparing();
      statementList = StatementList();
      jj_consume_token(END);
            {if (true) return new IfStatement(expression, statementList);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression ExpressionWithComparing() throws ParseException {
    Expression leftExpression;
    Expression expression;
    leftExpression = Expression();
    expression = ExpressionWithComparing1(leftExpression);
        {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression ExpressionWithComparing1(Expression leftExpression) throws ParseException {
    Expression rightExpression;
    Expression expression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
      rightExpression = Expression();
      expression = ExpressionWithComparing1(new LessOperatorExpression(leftExpression, rightExpression));
            {if (true) return expression;}
      break;
    case MORE_THAN:
      jj_consume_token(MORE_THAN);
      rightExpression = Expression();
      expression = ExpressionWithComparing1(new MoreOperatorExpression(leftExpression, rightExpression));
            {if (true) return expression;}
      break;
    default:
      jj_la1[2] = jj_gen;
        {if (true) return leftExpression;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException, NumberFormatException {
    Token t ;
    int i ;
    int value;
    Expression expression;
    Expression leftExpression;
    leftExpression = Term();
    expression = Expression1(leftExpression);
        {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression1(Expression leftExpression) throws ParseException {
    Expression expression;
    Expression rightExpression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      rightExpression = Term();
      expression = Expression1(new PlusOperatorExpression(leftExpression, rightExpression));
            {if (true) return expression;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      rightExpression = Term();
      expression = Expression1(new MinusOperatorExpression(leftExpression, rightExpression));
            {if (true) return expression;}
      break;
    default:
      jj_la1[3] = jj_gen;
        {if (true) return leftExpression;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Term() throws ParseException {
    Expression expression;
    Expression leftExpression;
    leftExpression = Factor();
    expression = Term1(leftExpression);
        {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Term1(Expression leftExpression) throws ParseException {
    Expression expression;
    Expression rightExpression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      rightExpression = Factor();
      expression = Term1(new MultiplyOperatorExpression(leftExpression, rightExpression));
            {if (true) return expression;}
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      rightExpression = Factor();
      expression = Term1(new DivideOperatorExpression(leftExpression, rightExpression));
            {if (true) return expression;}
      break;
    default:
      jj_la1[4] = jj_gen;
        {if (true) return leftExpression;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Factor() throws ParseException {
    Token t;
    Expression expression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTANT:
      t = jj_consume_token(CONSTANT);
            {if (true) return new ConstantExpression(Integer.parseInt(t.image));}
      break;
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
           {if (true) return new VariableExpression(t.image);}
      break;
    case OPEN_BRACKET:
      jj_consume_token(OPEN_BRACKET);
      expression = ExpressionWithComparing();
      jj_consume_token(CLOSE_BRACKET);
            {if (true) return expression;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x18080,0x18080,0x3000,0x300,0xc00,0xd0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
